//create raw tables
.create-merge table Aksservernode_Availability_Raw (metrics: dynamic) with (folder = "Raw")

.create-merge table Cosmosdb_Availability_Raw (metrics: dynamic) with (folder = "Raw")

.create-merge table Firewall_Availability_Raw (metrics: dynamic) with (folder = "Raw")

.create-merge table Keyvault_Availability_Raw (metrics: dynamic) with (folder = "Raw")

.create-merge table Loadbalancer_Availability_Raw (metrics: dynamic) with (folder = "Raw")

.create-merge table Storage_Availability_Raw (metrics: dynamic) with (folder = "Raw")

.create-merge table Eventhubs_Availability_Raw (metrics: dynamic) with (folder = "Raw")

.create-merge table Container_Registry_Availability_Raw (metrics: dynamic) with (folder = "Raw")

.create-merge table LogAnalytics_Availability_Raw (metrics: dynamic) with (folder = "Raw")

.create-merge table Health_Overviews_Raw (metrics: dynamic) with (folder = "Raw")

// Create ingestion mapping
.create-or-alter table Aksservernode_Availability_Raw ingestion json mapping 'RawMetricsMapping' '[{"Column":"metrics","Properties":{"path":"$"}}]'

.create-or-alter table Cosmosdb_Availability_Raw ingestion json mapping 'RawMetricsMapping' '[{"Column":"metrics","Properties":{"path":"$"}}]'

.create-or-alter table Firewall_Availability_Raw ingestion json mapping 'RawMetricsMapping' '[{"Column":"metrics","Properties":{"path":"$"}}]'

.create-or-alter table Keyvault_Availability_Raw ingestion json mapping 'RawMetricsMapping' '[{"Column":"metrics","Properties":{"path":"$"}}]'

.create-or-alter table Loadbalancer_Availability_Raw ingestion json mapping 'RawMetricsMapping' '[{"Column":"metrics","Properties":{"path":"$"}}]'

.create-or-alter table Storage_Availability_Raw ingestion json mapping 'RawMetricsMapping' '[{"Column":"metrics","Properties":{"path":"$"}}]'

.create-or-alter table Eventhubs_Availability_Raw ingestion json mapping 'RawMetricsMapping' '[{"Column":"metrics","Properties":{"path":"$"}}]'

.create-or-alter table Container_Registry_Availability_Raw ingestion json mapping 'RawMetricsMapping' '[{"Column":"metrics","Properties":{"path":"$"}}]'

.create-or-alter table LogAnalytics_Availability_Raw ingestion json mapping 'RawMetricsMapping' '[{"Column":"metrics","Properties":{"path":"$"}}]'

.create-or-alter table Health_Overviews_Raw ingestion json mapping 'RawMetricsMapping' '[{"Column":"metrics","Properties":{"path":"$"}}]'

//create adx tables
.create-merge table Resource_Providers (name: string, ['type']: string, resultTableName: string)

.create-merge table Subscription_Names (subscriptionId: guid, name: string)

.create-merge table Subscriptions (solution: string, tenancy: string, component: string, tenantId:guid, tenantDomain:string, subscriptionId: guid, createdAt: datetime)

.create-merge table Subscriptions_Processed (subscriptionId: guid, dateProcessed: datetime)

.create-merge table Aksservernode_Availability (['date']: datetime, ['id']: string, nodeReady: decimal, nodeNotReady: decimal, nodeUnknown: decimal, location: string, subscriptionId: guid, name: string) 

.create-merge table Cosmosdb_Availability (['date']: datetime, name: string, availability: decimal, subscriptionId: guid, location: string, ['id']: string)

.create-merge table Firewall_Availability (['date']: datetime, ['id']: string, availability: decimal, subscriptionId: guid, location: string, name: string)

.create-merge table Keyvault_Availability (['date']: datetime, ['id']: string, availability: decimal, subscriptionId: guid, location: string, name: string)

.create-merge table Loadbalancer_Availability (['date']: datetime, ['id']: string, availability: decimal, subscriptionId: guid, location: string, name: string)

.create-merge table Storage_Availability (['date']: datetime, ['id']: string, availability: decimal, subscriptionId: guid, location: string, name: string)

.create-merge table Eventhubs_Availability (['date']: datetime, ['id']: string, incomingRequests: decimal, serverErrors: decimal, location: string, subscriptionId: guid, name: string)

.create-merge table Container_Registry_Availability (['date']: datetime, ['id']: string, successfulPullCount: decimal, totalPullCount: decimal, successfulPushCount: decimal, totalPushCount: decimal, location: string, subscriptionId: guid, name: string)

.create-merge table LogAnalytics_Availability (['date']: datetime, ['id']: string, availability: decimal, subscriptionId: guid, location: string, name: string)

.create-merge table List_Issues (serviceId: string, id: guid, startDateTime: datetime, endDateTime: datetime, lastModifiedDateTime: datetime, title: string, impactDescription: string, classification: string, origin: string, status: string, service: string, feature: string, featureGroup: string, isResolved: bool)

.create-merge table Health_Overviews (id: string, service: string, status: string)

.create-merge table Details (id: guid, name: string, value: string)

.create-merge table Posts (id: guid, createdDateTime: datetime, postType: string, content: string)

//create functions

.create-or-alter function  Parse_Eventhubs_Availability() {
let requests = Eventhubs_Availability_Raw 
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid) 
    | extend subscriptionId = split(id, '/')[2] 
    | extend name = split(id, '/')[-1] 
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'IncomingRequests' 
    | mv-expand timeseries = value.timeseries 
    | mv-expand data = timeseries.data 
    | project timestamp = todatetime(data.timeStamp), id = tostring(id), incomingrequests = todecimal(data.average),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
let errors = Eventhubs_Availability_Raw 
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid) 
    | extend subscriptionId = split(id, '/')[2] 
    | extend name = split(id, '/')[-1] 
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'ServerErrors' 
    | mv-expand timeseries = value.timeseries 
    | mv-expand data = timeseries.data 
    | project timestamp = todatetime(data.timeStamp), id = tostring(id), servererrors = todecimal(data.average),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
(requests | join kind=leftouter errors on $left.timestamp == $right.timestamp and $left.id == $right.id) 
    | project timestamp, id, incomingrequests, servererrors, location, subscriptionId, name
}

.create-or-alter function  Parse_Container_Registry_Availability() {
let successfulPull = Container_Registry_Availability_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'SuccessfulPullCount'
    | mv-expand timeseries = value.timeseries
    | mv-expand data = timeseries.data
    | distinct timestamp = todatetime(data.timeStamp), id = tostring(id), successfulpullcount = todecimal(data.average),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
let totalPull = Container_Registry_Availability_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'TotalPullCount'
    | mv-expand timeseries = value.timeseries
    | mv-expand data = timeseries.data
    | distinct timestamp = todatetime(data.timeStamp), id = tostring(id), totalpullcount = todecimal(data.average),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
let successfulPush = Container_Registry_Availability_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'SuccessfulPushCount'
    | mv-expand timeseries = value.timeseries
    | mv-expand data = timeseries.data
    | distinct timestamp = todatetime(data.timeStamp), id = tostring(id), successfulpushcount = todecimal(data.average),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
let totalPush = Container_Registry_Availability_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'TotalPushCount'
    | mv-expand timeseries = value.timeseries
    | mv-expand data = timeseries.data
    | distinct timestamp = todatetime(data.timeStamp), id = tostring(id), totalpushcount = todecimal(data.average),
     location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name);
    (successfulPull | join kind = innerunique totalPull on $left.timestamp == $right.timestamp and $left.id == $right.id)
    | join kind = innerunique successfulPush on $left.timestamp == $right.timestamp and $left.id == $right.id
    | join kind = innerunique  totalPush on $left.timestamp == $right.timestamp and $left.id == $right.id
    | project timestamp, id, successfulpullcount, totalpullcount, successfulpushcount, totalpushcount, location, subscriptionId, name
}

.create-or-alter function  Parse_Aksservernode_Availability() {
    let ready = Aksservernode_Availability_Raw 
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid) 
    | extend subscriptionId = split(id, '/')[2] 
    | extend name = split(id, '/')[-1] 
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'kube_node_status_condition' 
    | mv-expand timeseries = value.timeseries 
    | mv-expand metadatavalues = timeseries.metadatavalues 
    | where tostring(metadatavalues.name.value) == 'status2' and tostring(metadatavalues.value) == 'Ready' 
    | mv-expand data = timeseries.data 
    | project timestamp = todatetime(data.timeStamp), id = tostring(id), nodeReady = todecimal(data.average), location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name); 
    let notReady = Aksservernode_Availability_Raw 
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2] 
    | extend name = split(id, '/')[-1] 
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'kube_node_status_condition' 
    | mv-expand timeseries = value.timeseries 
    | mv-expand metadatavalues = timeseries.metadatavalues 
    | where tostring(metadatavalues.name.value) == 'status2' and tostring(metadatavalues.value) == 'NotReady' 
    | mv-expand data = timeseries.data 
    | project timestamp = todatetime(data.timeStamp), id = tostring(id), nodeNotReady = todecimal(data.average), location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name); 
    let unknown = Aksservernode_Availability_Raw 
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2] 
    | extend name = split(id, '/')[-1] 
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'kube_node_status_condition' 
    | mv-expand timeseries = value.timeseries 
    | mv-expand metadatavalues = timeseries.metadatavalues 
    | where tostring(metadatavalues.name.value) == 'status2' and tostring(metadatavalues.value) == 'unknown' 
    | mv-expand data = timeseries.data 
    | project timestamp = todatetime(data.timeStamp), id = tostring(id), nodeUnknown = todecimal(data.average), location = tostring(region), subscriptionId = toguid(subscriptionId), name = tostring(name); 
    (ready | join kind=leftouter notReady on $left.timestamp == $right.timestamp and $left.id == $right.id) 
    | join kind=leftouter unknown on $left.timestamp == $right.timestamp and $left.id == $right.id 
    | project timestamp, id, nodeReady, nodeNotReady, nodeUnknown, location, subscriptionId, name
}

.create-or-alter function  Parse_Cosmosdb_Availability() {
    Cosmosdb_Availability_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'ServiceAvailability'
    | mv-expand timeseries = value.timeseries
    | mv-expand data = timeseries.data
    | project
        timestamp = todatetime(data.timeStamp),
        name = tostring(name),
        availability = todecimal(data.average),
        subscriptionId = toguid(subscriptionId),
        location = tostring(region),
        id = tostring(id)
}

.create-or-alter function  Parse_Firewall_Availability() {
    Firewall_Availability_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'FirewallHealth'
    | mv-expand timeseries = value.timeseries
    | mv-expand data = timeseries.data
    | project
        timestamp = todatetime(data.timeStamp),
        id = tostring(id),
        availability = todecimal(data.average),
        subscriptionId = toguid(subscriptionId),
        location = tostring(region),
        name = tostring(name)     
}

.create-or-alter function  Parse_Keyvault_Availability() {
    Keyvault_Availability_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'Availability'
    | mv-expand timeseries = value.timeseries
    | mv-expand data = timeseries.data
    | project
        timestamp = todatetime(data.timeStamp),
        id = tostring(id),
        availability = todecimal(data.average),
        subscriptionId = toguid(subscriptionId),
        location = tostring(region),
        name = tostring(name)
}

.create-or-alter function  Parse_Loadbalancer_Availability() {
    Loadbalancer_Availability_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'VipAvailability'
    | mv-expand timeseries = value.timeseries
    | mv-expand data = timeseries.data
    | project
        timestamp = todatetime(data.timeStamp),
        id = tostring(id),
        availability = todecimal(data.average),
        subscriptionId = toguid(subscriptionId),
        location = tostring(region),
        name = tostring(name)     
}

.create-or-alter function  Parse_Storage_Availability() {
    Storage_Availability_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'Availability'
    | mv-expand timeseries = value.timeseries
    | mv-expand data = timeseries.data
    | project
        timestamp = todatetime(data.timeStamp),
        id = tostring(id),
        availability = todecimal(data.average),
        subscriptionId = toguid(subscriptionId),
        location = tostring(region),
        name = tostring(name)     
}

.create-or-alter function  Parse_LogAnalytics_Availability() {
    LogAnalytics_Availability_Raw
    | mv-expand values = metrics.values
    | extend id = tostring(values.resourceid)
    | extend subscriptionId = split(id, '/')[2]
    | extend name = split(id, '/')[-1]
    | extend region = tostring(values.resourceregion)
    | mv-expand value = values.value
    | where tostring(value.name.value) == 'AvailabilityRate_Query'
    | mv-expand timeseries = value.timeseries
    | mv-expand data = timeseries.data
    | project
        timestamp = todatetime(data.timeStamp),
        id = tostring(id),
        availability = todecimal(data.average),
        subscriptionId = toguid(subscriptionId),
        location = tostring(region),
        name = tostring(name)     
}

.create-or-alter function Parse_Health_Overviews_Raw() {
    Health_Overviews_Raw
    | mv-expand = metrics.value
    | extend id = value.id
    | extend service = value.service
    | extend status = value.status
}

.create-or-alter function Parse_Health_Overviews_Raw_Issues() {
    Health_Overviews_Raw
    | mv-expand value = metrics.value
    | extend id = value.id
    | mv-expand issue = value.issues
    | extend serviceID = issue.id
    | extend startDateTime = issue.startDateTime
    | extend lastModifiedDateTime = issue.lastModifiedDateTime
    | extend title = issue.title
    | extend impactDescription = issue.impactDescription
    | extend classification = issue.classification
    | extend origin = issue.origin
    | extend status = issue.status
    | extend service = issue.service
    | extend feature = issue.feature
    | extend featureGroup = issue.featureGroup
    | extend isResolved = issue.isResolved
}

.create-or-alter function Parse_Health_Overviews_Raw_Details() {
    Health_Overviews_Raw
    | mv-expand value = metrics.value
    | extend id = value.id
    | mv-expand issue = value.issues
    | mv-expand detail = issue.details
    | extend name = issue.name
    | extend value = issue.value
}

.create-or-alter function Parse_Health_Overviews_Raw_Posts() {
    Health_Overviews_Raw
    | mv-expand value = metrics.value
    | extend id = value.id
    | mv-expand issue = value.issues
    | mv-expand post = issue.posts
    | extend createdDateTime = post.createdDateTime
    | extend postType = post.postType
    | extend content = post.content
}

// Update results table policies
.alter table Aksservernode_Availability policy update @'[{"Source": "Aksservernode_Availability_Raw", "Query": "Parse_Aksservernode_Availability()", "IsEnabled": "True", "IsTransactional": true}]'

.alter table Cosmosdb_Availability policy update @'[{"Source": "Cosmosdb_Availability_Raw", "Query": "Parse_Cosmosdb_Availability()", "IsEnabled": "True", "IsTransactional": true}]'

.alter table Firewall_Availability policy update @'[{"Source": "Firewall_Availability_Raw", "Query": "Parse_Firewall_Availability()", "IsEnabled": "True", "IsTransactional": true}]'

.alter table Keyvault_Availability policy update @'[{"Source": "Keyvault_Availability_Raw", "Query": "Parse_Keyvault_Availability()", "IsEnabled": "True", "IsTransactional": true}]'

.alter table Loadbalancer_Availability policy update @'[{"Source": "Loadbalancer_Availability_Raw", "Query": "Parse_Loadbalancer_Availability()", "IsEnabled": "True", "IsTransactional": true}]'

.alter table Storage_Availability policy update @'[{"Source": "Storage_Availability_Raw", "Query": "Parse_Storage_Availability()", "IsEnabled": "True", "IsTransactional": true}]'

.alter table Eventhubs_Availability policy update @'[{"Source": "Eventhubs_Availability_Raw", "Query": "Parse_Eventhubs_Availability()", "IsEnabled": "True", "IsTransactional": true}]'

.alter table Container_Registry_Availability policy update @'[{"Source": "Container_Registry_Availability_Raw", "Query": "Parse_Container_Registry_Availability()", "IsEnabled": "True", "IsTransactional": true}]'

.alter table LogAnalytics_Availability policy update @'[{"Source": "LogAnalytics_Availability_Raw", "Query": "Parse_LogAnalytics_Availability()", "IsEnabled": "True", "IsTransactional": true}]'

.alter table List_Issues policy update @'[{"Source": "Health_Overviews_Raw", "Query": "Parse_Health_Overviews_Raw_Issues()", "IsEnabled": "True", "IsTransactional": true}]'

.alter table Health_Overviews policy update @'[{"Source": "Health_Overviews_Raw", "Query": "Parse_Health_Overviews_Raw()", "IsEnabled": "True", "IsTransactional": true}]'

.alter table Details policy update @'[{"Source": "Health_Overviews_Raw", "Query": "Parse_Health_Overviews_Raw_Details()", "IsEnabled": "True", "IsTransactional": true}]'

.alter table Posts policy update @'[{"Source": "Health_Overviews_Raw", "Query": "Parse_Health_Overviews_Raw_Posts", "IsEnabled": "True", "IsTransactional": true}]'

// Adding zero retention policies on Raw tables
.alter-merge table Aksservernode_Availability_Raw policy retention softdelete = 0s

.alter-merge table Cosmosdb_Availability_Raw policy retention softdelete = 0s

.alter-merge table Firewall_Availability_Raw policy retention softdelete = 0s

.alter-merge table Keyvault_Availability_Raw policy retention softdelete = 0s

.alter-merge table Loadbalancer_Availability_Raw policy retention softdelete = 0s

.alter-merge table Storage_Availability_Raw policy retention softdelete = 0s

.alter-merge table Eventhubs_Availability_Raw policy retention softdelete = 0s

.alter-merge table Container_Registry_Availability_Raw policy retention softdelete = 0s

.alter-merge table LogAnalytics_Availability_Raw policy retention softdelete = 0s

.alter-merge table Health_Overviews_Raw policy retention softdelete = 0s

// Adding default (100 years) policy to Subs, RPs, and Sub Names tables
.alter table Subscriptions policy retention "{}"
 
.alter table Resource_Providers policy retention "{}"
 
.alter table Subscription_Names policy retention "{}"